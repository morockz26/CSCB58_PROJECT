CSCB58 Project File: winter 2018
Team Member A
-------------
First Name: Mohammed
Last Name: Osumah
Student Number: 1003232218
UofT E-mail Address: mohammed.osumah@mail.utoronto.ca

Team Member B
-------------
First Name: Sean
Last Name: Nguyen
Student Number: 1003458162
UofT E-mail Address:
seanh.nguyen@mail.utoronto.ca

Team Member C
-------------
First Name: Anurudran
Last Name: Chandrasekaram
Student Number: 1003245749
UofT E-mail Address: anurudran.chandrasekaram@mail.utoronto.ca

Team Member D
-------------
First Name: Adam
Last Name: Ah-Chong
Student Number: 1002771182
UofT E-mail Address: adam.ah.chong@mail.utoronto.ca

Project Details
---------------
Project Title: Snake

Project Description: A simple game of snake played using the DE2 board.

Video URL:

Youtube: https://www.youtube.com/watch?v=zhko9PVz6xU

Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development):

Github: https://github.com/morockz26/CSCB58_PROJECT

Proposal
--------

What do you plan to have completed by the end of the first lab session?:

Movement of the snake using keys and food spawning on the screen. Other miscellaneous things such as pausing, a start menu, etc.

What do you plan to have completed by the end of the second lab session?:

Collision detection of the head of the snake with the food, itself and the walls. When the snake eats food it gets longer, and when it hits itself or the edge of the screen it dies. A game over screen for when the player dies.

What do you plan to have completed by the end of the third lab session?:

Points for eating food and a high score table. Extra time for bugs and extra things to be added.

What is your backup plan if things don’t work out as planned?

What hardware will you need beyond the DE2 board ?
(be sure to e-mail Brian if it’s anything beyond the basics to make sure there’s enough to go around)

No hardware beyond the DE2 board will be needed for this project.

Motivations
-----------
How does this project relate to the material covered in CSCB58?:

The project will relate to the material covered in CSCB58 by using verilog and the vga to display our game. We will also be using FSMs and ALUs to control the data of what is being displayed on the screen.

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):

This project will be cool because the game we are going to make will probably be addicting and fun and you can compete with your fellow classmates to get the high score.

Why did you personally choose this project?:

The members of our group are interested in video games and this is the most complex idea we could think of without extra resources.

Attributions
------------
Provide a complete list of any external resources your project used (attributions should also be included in your
code).  

Updates
-------


Week 1:

We made the code to make the snake move. We ended up getting the snake to move with the keys in the direction we wanted it to go, but there was a problem deleting the trailing squares whenever the snake would move. There was also a problem with the snake going up, so we had to change our FSM to fix that (took a long time to debug). 

Week 2:

Tried implementing the code for the snake so that the snake moves without leaving any trialing squares still on the screen. We were having trouble getting the datapath to do such, so we plan on taking a slightly different approach to the problem. 

The approach we took was to have a module to generate each piece of the snake and has piece 0 as the head of the snake. That way when the other pieces aren’t needed, we just make them colour black. Our module transfers the data from one piece of the snake to the other piece so that when our snake moves the other pieces follow.

We need to test this new approach next week and if it works we can focus on randomly generating the food, collision detection and growing the snake, which we could implement using our pieces of the snake.

Week 3:

The approach to generate a module for each piece of the snake was simplified to each piece of the snake being a part an array of values with the head at index 0. With this approach we were able to transfer data from the one piece of the snake to the other piece so that when our snake moves the other pieces follow.

For the generating the food, we generate a random x and y depends when the food is eaten from its initial point. Everytime a clock rises, we increase x value by 1 and y value by 3, and reset back to 0 when x and y value reaches max resolution.

While testing collision between the snake and the food, there was a bug where the snake would move on and leave behind a coloured dot. We fixed it by finding the location of where the snake would leave behind a dot and fixed it by making the colour black. Other than that the score is added correctly and the snake grows by 4 as it’s supposed to. 

For the collision of the snake, we can detect when it happen by checking if the head location is the same as any other part of the snake. We make it so that the game reset when a death collision happens.

Before our presentation we need to change the reset function so that either redraw the background before drawing the new snake and food, or go through every piece of the old snake and draw it black. We also need to add coloured borders for snake death collision.

Week 4:

We finally got the snake to start at the center of the screen, which was a problem we were having since the first week of the project.

We finally got the snake to delete itself whenever it dies or we reset the game. We also updated the black.mif file, so that it draws a pinkish background around the border, just to make the game look a bit more appealing.

We changed the black.mif file to background.mif, and we changed the data in the file so that we could get a pinkish border around our game, for visual appeal.

We got the score and highscore feature to work during lab time, because there was a weird bug happening where, if we reset the game using our reset switch the high score would end up going to FF and never change, so we modified our code and fixed the bug.
